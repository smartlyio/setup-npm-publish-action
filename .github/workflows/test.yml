name: Build and test

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  build: # make sure build/ci work properly
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Install"
      run: |
        npm install
    - name: "Run build"
      run: |
        npm run all
    - name: "Run tests"
      run: |
        npm run test
    - name: "Verify artefacts are up to date in the repository"
      run: |
        # Error if there are changes after the build
        if [ "$(git status --porcelain | wc -c)" -gt "0" ]; then
            echo "Built artefacts (dist/*) were not updated by the pull request."
            echo "Run `npm run-script package` and commit the changes."
            exit 1
        fi

  test:
    runs-on: ubuntu-latest
    # Only run if the action is up-to-date
    needs: build
    env:
      EMAIL_INPUT: test@example.com
      USERNAME_INPUT: example-test
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        env:
          GIT_DEPLOY_KEY: not-a-real-key
          AUTH_TOKEN_STRING: definitely-real-token
        with:
          email: ${{ env.EMAIL_INPUT }}
          username: ${{ env.USERNAME_INPUT }}
      - run: |
          set -u
          cat "$RUNNER_TEMP/setup-npm-publish-action/id_rsa"
          echo
          git config user.name
          git config user.email
          git remote get-url origin
          git config core.sshCommand
          grep '^github\.com' "$RUNNER_TEMP/setup-npm-publish-action/known_hosts"

          [[ "$(cat "$RUNNER_TEMP/setup-npm-publish-action/id_rsa")" == "not-a-real-key" ]]
          [[ "$(git config user.name)" == "${{ env.USERNAME_INPUT }}" ]]
          [[ "$(git config user.email)" == "${{ env.EMAIL_INPUT }}" ]]
          [[ "$(git remote get-url origin)" == "git@github.com:$GITHUB_REPOSITORY.git" ]]

          # Just check that it is altered from default
          [[ "$(git config core.sshCommand)" == *UserKnownHostsFile* ]]
